gecko_origina_nomirna
View(combined_no_mirna)
#gecko exact matches without pam
exact_match_gene_counts<-data.frame(table(read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_mouse/mouse_exact_match_genes.txt', header = FALSE, colClasses = "character")))
#exact_match_gene_counts<-exact_match_gene_counts[,c(4,5)]
#adding in any 0s (anything in the original that isn't in this list)
exact_genes_0<-data.frame(gecko_original_unique[which(as.character(gecko_original_unique) %!in% unique(as.character(exact_match_gene_counts$Var1)))])
colnames(exact_genes_0)[1]<-'Var1'
exact_genes_0$Freq<-0
#colnames(exact_genes_0)[2]<-'V1'
exact_match_gene_counts<-rbind(exact_match_gene_counts,exact_genes_0)
exact_match_gene_counts$type<-'RNA'
exact_mirna<-which(grepl('mir',exact_match_gene_counts$V2))
exact_mirna
#gecko exact matches without pam
exact_match_gene_counts<-data.frame(table(read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_mouse/mouse_exact_match_genes.txt', header = FALSE, colClasses = "character")))
#exact_match_gene_counts<-exact_match_gene_counts[,c(4,5)]
#adding in any 0s (anything in the original that isn't in this list)
exact_genes_0<-data.frame(gecko_original_unique[which(as.character(gecko_original_unique) %!in% unique(as.character(exact_match_gene_counts$Var1)))])
colnames(exact_genes_0)[1]<-'Var1'
exact_genes_0$Freq<-0
#colnames(exact_genes_0)[2]<-'V1'
exact_match_gene_counts<-rbind(exact_match_gene_counts,exact_genes_0)
exact_match_gene_counts$type<-'RNA'
#gecko exact matches without pam
exact_match_gene_counts<-data.frame(table(read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_mouse/mouse_exact_match_genes.txt', header = FALSE, colClasses = "character")))
#exact_match_gene_counts<-exact_match_gene_counts[,c(4,5)]
#adding in any 0s (anything in the original that isn't in this list)
exact_genes_0<-data.frame(gecko_original_unique[which(as.character(gecko_original_unique) %!in% unique(as.character(exact_match_gene_counts$Var1)))])
colnames(exact_genes_0)[1]<-'Var1'
exact_genes_0$Freq<-0
#colnames(exact_genes_0)[2]<-'V1'
exact_match_gene_counts<-rbind(exact_match_gene_counts,exact_genes_0)
exact_match_gene_counts$type<-'RNA'
exact_mirna<-which(grepl('mir',exact_match_gene_counts$Var1))
exact_match_gene_counts$type[exact_mirna]<-'miRNA'
exact_match_gene_counts$pam<-'Matched'
colnames(exact_match_gene_counts)<-c('gene','freq','type','pam')
exact_match_gene_counts<-exact_match_gene_counts[,c(2,1,3,4)]
#exact_match_gene_counts[,1]<-as.factor(exact_match_gene_counts[,1])
exact_match_gene_counts$freq<-as.numeric(as.character(exact_match_gene_counts$freq))
exact_match_gene_counts$freq<-as.numeric(as.character(exact_match_gene_counts$freq))
combined<-rbind(gecko_original_combined,with_pam_genes_frequency,exact_match_gene_counts)
combined$pam<-as.factor(combined$pam)
pam_RNA_vs_miRNA<-ggplot(with_pam_genes_frequency, aes( x = with_pam_genes_frequency$type)) +
geom_bar()
pam_RNA_vs_miRNA
#by miRNA
pam_vs_not<-ggplot(combined, aes( x = combined$pam)) +
geom_bar(aes(fill = combined$type)) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
xlab(NULL)
pam_vs_not
#by frequency (with miRNA)
pam_vs_not<-ggplot(combined, aes( x = combined$freq)) +
geom_histogram(aes(fill = as.factor(pam))) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_continuous(breaks=0:6, labels=c(0,1,2,3,4,5,6))  +
#scale_y_log10() +
xlab(NULL)
pam_vs_not
#by frequency without miRNA
combined_no_mirna<-combined[-which(combined$type=='miRNA'),]
pam_vs_not<-ggplot(combined_no_mirna, aes( x = freq)) +
geom_histogram(aes(fill = as.factor(pam))) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_continuous(breaks=0:6, labels=c(0,1,2,3,4,5,6))  +
#scale_y_log10() +
xlab(NULL)
pam_vs_not
gecko_origina_nomirna<-ggplot(combined_no_mirna, aes( x = pam, y = 1)) +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
#geom_label(aes(label = freq),position = position_stack(vjust = 0.5),size = 2.75,color = 'white') +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_origina_nomirna
sum(exact_match_gene_counts$freq)
#gecko exact matches without pam
exact_match_gene_counts<-data.frame(table(read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_mouse/mouse_exact_match_genes.txt', header = FALSE, colClasses = "character")))
#exact_match_gene_counts<-exact_match_gene_counts[,c(4,5)]
#adding in any 0s (anything in the original that isn't in this list)
exact_genes_0<-data.frame(gecko_original_unique[which(as.character(gecko_original_unique) %!in% unique(as.character(exact_match_gene_counts$Var1)))])
colnames(exact_genes_0)[1]<-'Var1'
exact_genes_0$Freq<-0
#colnames(exact_genes_0)[2]<-'V1'
exact_match_gene_counts<-rbind(exact_match_gene_counts,exact_genes_0)
#gecko exact matches without pam
exact_match_gene_counts<-data.frame(table(read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_mouse/mouse_exact_match_genes.txt', header = FALSE, colClasses = "character")))
#gecko exact matches without pam
exact_match_gene_counts<-data.frame(table(read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_mouse/mouse_exact_gene_matches.txt', header = FALSE, colClasses = "character")))
#exact_match_gene_counts<-exact_match_gene_counts[,c(4,5)]
#adding in any 0s (anything in the original that isn't in this list)
exact_genes_0<-data.frame(gecko_original_unique[which(as.character(gecko_original_unique) %!in% unique(as.character(exact_match_gene_counts$Var1)))])
colnames(exact_genes_0)[1]<-'Var1'
exact_genes_0$Freq<-0
#colnames(exact_genes_0)[2]<-'V1'
exact_match_gene_counts<-rbind(exact_match_gene_counts,exact_genes_0)
exact_match_gene_counts$type<-'RNA'
exact_mirna<-which(grepl('mir',exact_match_gene_counts$Var1))
exact_match_gene_counts$type[exact_mirna]<-'miRNA'
exact_match_gene_counts$pam<-'Matched'
colnames(exact_match_gene_counts)<-c('gene','freq','type','pam')
exact_match_gene_counts<-exact_match_gene_counts[,c(2,1,3,4)]
#exact_match_gene_counts[,1]<-as.factor(exact_match_gene_counts[,1])
exact_match_gene_counts$freq<-as.numeric(as.character(exact_match_gene_counts$freq))
exact_match_gene_counts$freq<-as.numeric(as.character(exact_match_gene_counts$freq))
combined<-rbind(gecko_original_combined,with_pam_genes_frequency,exact_match_gene_counts)
combined$pam<-as.factor(combined$pam)
pam_RNA_vs_miRNA<-ggplot(with_pam_genes_frequency, aes( x = with_pam_genes_frequency$type)) +
geom_bar()
pam_RNA_vs_miRNA
#by miRNA
pam_vs_not<-ggplot(combined, aes( x = combined$pam)) +
geom_bar(aes(fill = combined$type)) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
xlab(NULL)
pam_vs_not
#by frequency (with miRNA)
pam_vs_not<-ggplot(combined, aes( x = combined$freq)) +
geom_histogram(aes(fill = as.factor(pam))) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_continuous(breaks=0:6, labels=c(0,1,2,3,4,5,6))  +
#scale_y_log10() +
xlab(NULL)
pam_vs_not
#by frequency without miRNA
combined_no_mirna<-combined[-which(combined$type=='miRNA'),]
pam_vs_not<-ggplot(combined_no_mirna, aes( x = freq)) +
geom_histogram(aes(fill = as.factor(pam))) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_continuous(breaks=0:6, labels=c(0,1,2,3,4,5,6))  +
#scale_y_log10() +
xlab(NULL)
pam_vs_not
gecko_origina_nomirna<-ggplot(combined_no_mirna, aes( x = pam, y = 1)) +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
#geom_label(aes(label = freq),position = position_stack(vjust = 0.5),size = 2.75,color = 'white') +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_origina_nomirna
gecko_original<-ggplot(combined, aes( x = pam, y = 1))  +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
combined<-combined[combined$freq!=8,]
gecko_original<-ggplot(combined, aes( x = pam, y = 1))  +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_original
gecko_origina_nomirna<-ggplot(combined_no_mirna, aes( x = pam, y = 1)) +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
#geom_label(aes(label = freq),position = position_stack(vjust = 0.5),size = 2.75,color = 'white') +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_origina_nomirna
ggsave(plot = gecko_origina_nomirna,'no_mirna_3_column_frequencies.pdf', height =3, width = 3)
combined<-combined[combined$freq!=8,]
gecko_original<-ggplot(combined, aes( x = pam, y = 1))  +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_original
ggsave(plot = gecko_original,'3_column_frequencies.pdf', height =3, width = 3)
ggsave(plot = gecko_origina_nomirna,'no_mirna_mouse_gm_gecko.pdf', height =3, width = 3)
gecko_origina_nomirna<-ggplot(combined_no_mirna, aes( x = pam, y = 1)) +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
#geom_label(aes(label = freq),position = position_stack(vjust = 0.5),size = 2.75,color = 'white') +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_origina_nomirna
ggsave(plot = gecko_origina_nomirna,'no_mirna_mouse_gm_gecko.pdf', height =3, width = 3)
combined<-combined[combined$freq!=8,]
gecko_original<-ggplot(combined, aes( x = pam, y = 1))  +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_original
ggsave(plot = gecko_original,'mouse_gm_gecko.pdf', height =3, width = 3)
library(Rsamtools)
library(Biostrings)
library(svMisc)
setwd('/Users/gerbix/Documents/vikas/gecko_green_monkey')
#gecko_b<-scanBam('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_b_20m.bam')
gecko_b<-scanBam('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_b_20m.bam')
fasta_list<-list.files('/Users/gerbix/Documents/vikas/gecko_green_monkey/green_monkey_fastas', pattern = '*.fa$', full.names = TRUE)
dna = readDNAStringSet("/Users/gerbix/Documents/vikas/gecko_green_monkey/green_monkey_combined.fasta")
dna_names<-c()
for(i in 1:length(names(dna))){
dna_names<-append(dna_names, strsplit(names(dna)[i], ' ')[[1]][1])
}
with_pam_names<-c()
with_pam_seq<-c()
with_pam_names_rc<-c()
with_pam_seq_rc<-c()
without_pam_seq<-c()
without_pam_name<-c()
for (i in 1:length(gecko_b[[1]]$rname)){
progress(i,4170)
temp<-which( dna_names == gecko_b[[1]]$rname[i])
#temp_dna_seq is the dna string from the reference
temp_dna_seq<-as.character(substr(dna[temp,], gecko_b[[1]]$pos[i], (gecko_b[[1]]$pos[i] + 22)))
#revcomp is the reverse complement dna string from the reference
revcomp<-as.character(as.character(substr(dna[temp,], gecko_b[[1]]$pos[i] -3 , (gecko_b[[1]]$pos[i] + 20))))
# print(temp_dna_seq)
#  print((revcomp))
#
# temp_a<-paste0(gecko_b[[1]]$seq[i], 'AGG')
# temp_c<-paste0(gecko_b[[1]]$seq[i], 'CGG')
# temp_t<-paste0(gecko_b[[1]]$seq[i], 'TGG')
# temp_g<-paste0(gecko_b[[1]]$seq[i], 'GGG')
#
temp_nuc<-paste0(gecko_b[[1]]$seq[i], '.GG')
# temp_a_rev<-paste0('CCT',gecko_b[[1]]$seq[i])
# temp_c_rev<-paste0('CCG',gecko_b[[1]]$seq[i])
# temp_t_rev<-paste0('CCC',gecko_b[[1]]$seq[i])
# temp_g_rev<-paste0('CCA',gecko_b[[1]]$seq[i])
temp_nuc_rev<-paste0('CC.',gecko_b[[1]]$seq[i])
#if(grepl(temp_a,temp_dna_seq) |grepl(temp_c,temp_dna_seq) | grepl(temp_t,temp_dna_seq) | grepl(temp_g,temp_dna_seq)){
if(grepl(temp_nuc,temp_dna_seq)){
#print('ok')
with_pam_names<-append(with_pam_names, gecko_b[[1]]$qname[i])
with_pam_seq<-append(with_pam_seq, temp_dna_seq)
}
else if(grepl(temp_nuc_rev,revcomp)){
#print('rc')
with_pam_names<-append(with_pam_names, gecko_b[[1]]$qname[i])
with_pam_seq<-append(with_pam_seq, temp_dna_seq)
}
else{
# print(temp_dna_seq)
# print(revcomp)
# print('')
without_pam_name<-append(without_pam_name, gecko_b[[1]]$qname[i])
without_pam_seq<-append(without_pam_seq, revcomp)
}
}
length(gecko_b[[1]]$rname)
with_pam_names<-c()
with_pam_seq<-c()
with_pam_names_rc<-c()
with_pam_seq_rc<-c()
without_pam_seq<-c()
without_pam_name<-c()
for (i in 1:length(gecko_b[[1]]$rname)){
progress(i,31820)
temp<-which( dna_names == gecko_b[[1]]$rname[i])
#temp_dna_seq is the dna string from the reference
temp_dna_seq<-as.character(substr(dna[temp,], gecko_b[[1]]$pos[i], (gecko_b[[1]]$pos[i] + 22)))
#revcomp is the reverse complement dna string from the reference
revcomp<-as.character(as.character(substr(dna[temp,], gecko_b[[1]]$pos[i] -3 , (gecko_b[[1]]$pos[i] + 20))))
# print(temp_dna_seq)
#  print((revcomp))
#
# temp_a<-paste0(gecko_b[[1]]$seq[i], 'AGG')
# temp_c<-paste0(gecko_b[[1]]$seq[i], 'CGG')
# temp_t<-paste0(gecko_b[[1]]$seq[i], 'TGG')
# temp_g<-paste0(gecko_b[[1]]$seq[i], 'GGG')
#
temp_nuc<-paste0(gecko_b[[1]]$seq[i], '.GG')
# temp_a_rev<-paste0('CCT',gecko_b[[1]]$seq[i])
# temp_c_rev<-paste0('CCG',gecko_b[[1]]$seq[i])
# temp_t_rev<-paste0('CCC',gecko_b[[1]]$seq[i])
# temp_g_rev<-paste0('CCA',gecko_b[[1]]$seq[i])
temp_nuc_rev<-paste0('CC.',gecko_b[[1]]$seq[i])
#if(grepl(temp_a,temp_dna_seq) |grepl(temp_c,temp_dna_seq) | grepl(temp_t,temp_dna_seq) | grepl(temp_g,temp_dna_seq)){
if(grepl(temp_nuc,temp_dna_seq)){
#print('ok')
with_pam_names<-append(with_pam_names, gecko_b[[1]]$qname[i])
with_pam_seq<-append(with_pam_seq, temp_dna_seq)
}
else if(grepl(temp_nuc_rev,revcomp)){
#print('rc')
with_pam_names<-append(with_pam_names, gecko_b[[1]]$qname[i])
with_pam_seq<-append(with_pam_seq, temp_dna_seq)
}
else{
# print(temp_dna_seq)
# print(revcomp)
# print('')
without_pam_name<-append(without_pam_name, gecko_b[[1]]$qname[i])
without_pam_seq<-append(without_pam_seq, revcomp)
}
}
with_pam<-data.frame(with_pam_names,with_pam_seq)
withoutpam<-data.frame(without_pam_name, without_pam_seq)
write.csv(with_pam,'gecko_b_with_pam.csv')
write.csv(withoutpam, 'gecko_b_without_pam.csv')
getwd()
setwd('/Users/gerbix/Documents/vikas/gecko_green_monkey')
'%!in%' <- function(x,y)!('%in%'(x,y))
myBreaks <- function(x){
breaks <- c(min(x),median(x),max(x))
names(breaks) <- attr(breaks,"labels")
breaks
}
#gecko original
gecko_a_original<-read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_a_original.csv')
gecko_a_original$UID<-NULL
gecko_a_original$seq<-NULL
gecko_b_original<-read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_b_original.csv')
gecko_b_original$UID<-NULL
gecko_b_original$seq<-NULL
gecko_original_combined<-data.frame(table(c(as.character(gecko_a_original$gene_id), as.character(gecko_b_original$gene_id))))
gecko_original_mir<-which(grepl('mir',gecko_original_combined$Var1))
gecko_original_combined$type<-'RNA'
gecko_original_combined$type[gecko_original_mir]<-'miRNA'
gecko_original_combined$pam<-'Original'
colnames(gecko_original_combined)<-c('gene','freq','type','pam')
gecko_original_unique<-unique(gecko_original_combined$gene)
#gecko with pam
gecko_a_with_pam<-read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_a_with_pam.csv')
gecko_b_with_pam<-read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/gecko_b_with_pam.csv')
with_pam_genes_frequency<-data.frame(table(c(as.character(gecko_a_with_pam$with_pam_names), as.character(gecko_b_with_pam$with_pam_names))))
#adding in any 0s (anything in the original that isn't in this list)
with_pam_genes_0<-data.frame(gecko_original_unique[which(as.character(gecko_original_unique) %!in% unique(as.character(with_pam_genes_frequency$Var1)))])
colnames(with_pam_genes_0)[1]<-'Var1'
with_pam_genes_0$Freq<-0
with_pam_genes_frequency<-rbind(with_pam_genes_frequency,with_pam_genes_0)
mirna<-which(grepl('mir',with_pam_genes_frequency$Var1))
with_pam_genes_frequency$type<-'RNA'
with_pam_genes_frequency$type[mirna]<-'miRNA'
with_pam_genes_frequency$pam<-'Matched + PAM'
colnames(with_pam_genes_frequency)<-c('gene','freq','type','pam')
#gecko exact matches without pam
exact_match_gene_counts<-read.csv('/Users/gerbix/Documents/vikas/gecko_green_monkey/exact_match_gene_counts.txt', sep = ' ', header = FALSE)
#adding in any 0s (anything in the original that isn't in this list)
exact_genes_0<-data.frame(gecko_original_unique[which(as.character(gecko_original_unique) %!in% unique(as.character(exact_match_gene_counts$V2)))])
colnames(exact_genes_0)[1]<-'V2'
exact_genes_0$V1<-0
exact_match_gene_counts<-rbind(exact_match_gene_counts,exact_genes_0)
exact_match_gene_counts$type<-'RNA'
exact_mirna<-which(grepl('mir',exact_match_gene_counts$V2))
exact_match_gene_counts$type[exact_mirna]<-'miRNA'
exact_match_gene_counts$pam<-'Matched'
colnames(exact_match_gene_counts)<-c('freq','gene','type','pam')
exact_match_gene_counts<-exact_match_gene_counts[,c(2,1,3,4)]
combined<-rbind(gecko_original_combined,with_pam_genes_frequency,exact_match_gene_counts)
combined$pam<-as.factor(combined$pam)
pam_RNA_vs_miRNA<-ggplot(with_pam_genes_frequency, aes( x = with_pam_genes_frequency$type)) +
geom_bar()
pam_RNA_vs_miRNA
#by miRNA
pam_vs_not<-ggplot(combined, aes( x = combined$pam)) +
geom_bar(aes(fill = combined$type)) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
xlab(NULL)
pam_vs_not
#by frequency (with miRNA)
pam_vs_not<-ggplot(combined, aes( x = combined$freq)) +
geom_histogram(aes(fill = as.factor(pam))) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_continuous(breaks=0:6, labels=c(0,1,2,3,4,5,6))  +
#scale_y_log10() +
xlab(NULL)
pam_vs_not
#by frequency without miRNA
combined_no_mirna<-combined[-which(combined$type=='miRNA'),]
pam_vs_not<-ggplot(, aes( x = freq)) +
geom_histogram(aes(fill = as.factor(pam))) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_continuous(breaks=0:6, labels=c(0,1,2,3,4,5,6))  +
#scale_y_log10() +
xlab(NULL)
pam_vs_not
gecko_origina_nomirna<-ggplot(combined_no_mirna, aes( x = pam, y = 1)) +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
#geom_label(aes(label = freq),position = position_stack(vjust = 0.5),size = 2.75,color = 'white') +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_origina_nomirna
summary_table<-t(data.frame(table(gecko_original_combined$freq)))
summary_table<-rbind(summary_table,t(data.frame(table(exact_match_gene_counts$freq))[2]))
summary_table<-rbind(summary_table,t(data.frame(table(with_pam_genes_frequency$freq))[2]))
rownames(summary_table)<-c('matches','original','matched','matched with pam')
summary_table
summary_table<-t(data.frame(table(gecko_original_combined$freq)))
summary_table<-rbind(summary_table,t(data.frame(table(exact_match_gene_counts$freq))[2]))
summary_table<-rbind(summary_table,t(data.frame(table(with_pam_genes_frequency$freq))[2]))
rownames(summary_table)<-c('matches','original','matched','matched with pam')
write.csv(summary_table, 'matches_summarized.csv')
write.csv(combined, 'all_gene_counts.csv')
ggsave(plot = gecko_origina_nomirna,'no_mirna_human_gm.pdf', height =3, width = 3)
gecko_origina_nomirna<-ggplot(combined_no_mirna, aes( x = pam, y = 1)) +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
#geom_label(aes(label = freq),position = position_stack(vjust = 0.5),size = 2.75,color = 'white') +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_origina_nomirna
ggsave(plot = gecko_origina_nomirna,'no_mirna_human_gm.pdf', height =3, width = 3)
combined<-combined[combined$freq!=8,]
gecko_original<-ggplot(combined, aes( x = pam, y = 1))  +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_original
ggsave(plot = gecko_original,'human_gm.pdf', height =3, width = 3)
gecko_origina_nomirna<-ggplot(combined_no_mirna, aes( x = pam, y = 1)) +
geom_bar(stat = "identity", aes(fill = as.factor(freq))) +
#geom_text(aes(label=freq, y = freq), size=3) +
theme_classic() +
theme(legend.title = element_blank()) +
#geom_label(aes(label = freq),position = position_stack(vjust = 0.5),size = 2.75,color = 'white') +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_fill_brewer(palette="Set2") +
#xlim(c(0,25000)) +
#scale_y_continuous(breaks = myBreaks, limits = c(0,25000))+
scale_y_continuous(breaks = c(0,5500,11000,16500,22000), limits = c(0,22000)) +
xlab(NULL) +
ylab('Counts')
gecko_origina_nomirna
ggsave(plot = gecko_origina_nomirna,'no_mirna_human_gm.pdf', height =3, width = 3)
